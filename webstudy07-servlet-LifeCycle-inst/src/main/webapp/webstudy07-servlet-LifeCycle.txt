**Servlet 기본 개념**

HTTP : HyperText Transfer Protocol 
WAS : Web Application Server 
		 Web Server + Web Container 
		 Web Server -> HTTP 에 의거해 HTML을 서비스하는 서버 
		 Web Container -> Servlet/JSP 실행환경을 제공 
		 
WAS 제품 중 Apache-Tomcat을 사용한다 

Web 환경 설정 
0. WAS 설치 
1. 포트설정 : apache-tomcat/conf/server.xml 에서 port를 변경 ( 이유는 오라클 포트와 중복 방지를 위해 ) 
2. 한글처리 ( get 방식 ) : URIEncoding="utf-8" 설정 추가 
3. 자동리로드 : apache-tomcat/conf/context.xml에서 reloadable="true" 설정 추가 
                  java class ( Servlet 포함해서 ) 변경시 자동 리로딩하게 해서 개발 편의성 증대  

Servlet : Java Web Programming 기술 
		   java class로 표현 
		   Model2 Architecture( MVC ) 에서 Controller의 역할을 한다 	
		  ( Spring Framework의 웹기술 SpringMVC의 FrontController 인 DispatcherServlet도 서블릿이다 ) 
		  
JSP : Java Server Page 
		동적인 웹페이지 생성을 위한 기술 
	    HTML 구조 상에서 JSP tag (java code) 를 삽입 -> View 를 구현하는 측면에서 장점 
	    Model2 Architecture( MVC ) 에서 View의 역할을 한다 
	    	
참고 )   MVC Design Pattern 
		 Model : 비즈니스 로직과 데이터 액세스 로직을 담당 
		 		  Java Beans ( or Java Component ) : Service , DAO , DTO , VO ... 
		 View : 클라이언트에게 동적인 화면을 제공 : JSP 
		 Controller : 제어자의 역할 , 클라이언트의 요청을 분석 , 그에 대한 Model 연동 후 
		 			   적절한 View를 선택해 응답하게 하는 역할 
		 
		 JSP is a Servlet -> JSP 는 Web Container에 의해 java class로 생성되어 컴파일, 실행되고 
		 						   이 자바 클래스는 Servlet Interface의 하위 , HttpServlet class의 자식이다 
	
	**************************************************************************
	webstudy06-servlet-basic
	
	Deployment Descriptor ( DD ) :   WEB-INF/web.xml -> 웹어플리케이션의 설정 정보를 기술   
	배포          기술서                  WAS 는 웹어플리케이션 실행 첫 시점에 DD(web.xml) 정보를 로드하여 
										   서비스에 반영한다         	 
	web.xml 의 서블릿 설정 부분 
 <servlet>
  	<servlet-name>basic</servlet-name><!--  서블릿 별칭    -->
  	<servlet-class>step1.BasicServlet</servlet-class><!-- 팩키지명.클래스명   -->
  </servlet>
  <servlet-mapping>
  	<servlet-name>basic</servlet-name><!-- 위 서블릿을 지칭   -->
  	<url-pattern>/bs</url-pattern><!-- 클라이언트가 해당 서블릿을 실행시켜 서비스 받기 위한 url   -->
  </servlet-mapping>	 
		 
  Http Request Method ( 요청 방식 ) 
  1. get 방식  : 정보 조회용 , url 상에 전송 정보가 노출됨 , 전송 데이터 용량에 제한 
  2. post 방식 : 정보 전달용(주로 서버 자원의 데이터 변경시 사용) , url 상에 전송 정보가 노출되지 않고 
                  http request body 부분에 저장되어 전송(별도의 한글처리가 필요) , 전송 데이터 용량 제한 x 
  					
		 
	
  - client ( html form ) 과 server ( servlet ) 연동 
   	 
   	 client 																									Server
   	 <form action="url pattern"  method="get">															
   	 <input type="text" name="food">																	   url pattern에 해당하는 서블릿의 doGet 메서드가 실행 
   	 <input type="submit" value="주문">																   클라이언트가 보낸 정보를 입력받기 위해 	
   	 </form>	 																							   request.getParameter(name) 즉 request.getParameter("food") 과 같이 입력받는다
	  submit 을 누르면 아래와 같은 형식으로 전송된다 	 
	  http://localhost:8888/webstudy06-servlet-basic/url-pattern?name=value&name=value	 
		 		  
*******************************************************************************************
webstudy07-servlet-LifeCycle

Web Architecture
															 WAS (Web Server + Web Container)              Database 
client - browser 												
http 프로토콜에 의거해 									 Http 프로토콜에 의거해 
서버로 요청 ( Http Request 전달 ) 						 Http Request 를 분석 
															 적절한 Http Response 로 응답 
Http Response 메세지를 입력받아 
html , javascript , css 를 해석해서 
브라우저 상에서 표현 

- 서블릿 계층구조 ( Servlet Hierarchy ) : servlet-hierarchy.jpg 참조 
<<interface>>
Servlet : 서블릿 인터페이스는 모든 서블릿(jsp 포함)이 implements 해야 하는 메서드(abstract method)를 정의한 인터페이스
		   모든 서블릿과 jsp 의 최상위 인터페이스이다. 
		   
<<abstract>>
GenericServlet : Servlet interface를 implements 하는 abstract class 
                    프로토콜에 독립적인 abstract class 
				    일반적으로 서블릿(서버프로그램)이 가져야 하는 메서드를 구현해 자식 클래스에게 물려주고 
				    자식 차원에서 구현해야 하는 abstract method ( service 메서드 ) 를 정의하고 있다 
<<abstract>>
HttpServlet :  GenericServlet을 상속받는 클래스 	  
				  Http Protocol에 특화된 서비스를 구현하는 데 유용한 기능을 제공한다 
				  일반적으로 web application 개발시에는 이 클래스를 상속받아 개발한다 

Servlet Interface ( Servlet , ServletRequest, ServletResponse, HttpSession .. ) 들을 중심으로
Servlet API ( Application Programming Interface ) 를 정의하고 
실제 구현 클래스 ( 구현체 : implementation ) 들은 개별 WAS 제품군에서 정의한다 
이러한 설계의 장점은 다형성 적용에 있다 
일반 웹어플리케이션 개발 진영에서는 Servlet API 즉 인터페이스를 보고 개발하고 
실제 동작은 개별 WAS 제품군에서 구현한 클래스가 동작하는 방식으로 
WAS 가 변경되더라도 특정한 프로그램의 수정없이 배포되어 실행될 수 있다는 장점이 있다 
-> Web Application 과 개별 WAS 제품군과의 결합도를 낮추어 유지보수성을 향상시킬 수 있다는 의미 

- Servlet LifeCycle 
  Servlet/JSP 계층구조의 최상위 인터페이스 Servlet 의 LifeCycle abstract method 
  init() , service() , destroy() 
  
  서블릿의 라이프 사이클을 관리하는 주체는 WAS( Web Container ) 이다 
  -> web.xml(Deployment Descriptor:웹어플리케이션 설정정보)를 로딩하고 서블릿 객체를 생성하고
      init() , service() -> doGet() or doPost() , destroy() 를 실행하는 주체는 Web Container(Servlet Container)이다 
      
      init() : 해당 서블릿의 초기화 작업 , 서블릿 당 한번 실행 
      service() : 해당 서블릿이 클라이언트에게 서비스 하기 위해 실행 ( 내부적으로 doGet() or doPost() 로 연결 ) 
      			   클라이언트 요청시마다 매번 실행 
      destroy() : 해당 서블릿이 서비스 종료되기 직전에 호출 ( WAS를 중지할 때 실행 ) 
  ----------------------------------------------------------------------------------------
  											WAS(Web Server + Web Container)
  											
  client browser --request-->			is loaded? -- no --> class loading
  				   <--response--				|						|	
  				   								| 					  객체 생성 ( 서블릿 생성 ) 
												|						|  											   
  											   	|					  init(ServletConfig) 호출 	
  											   	|						|
  											  yes ------>	   service(request,response) --> doGet() or doPost() 	
  											  
  											  						destroy() : 해당 서블릿이 서비스 종료 ( WAS 종료시 ) 되기 직전에 호출 	
  											    
      
           
  
  ex) LifeCycleServlet 에 클라이언트가 10명이 접속해서 서비스를 받았다 
   
   LifeCycleServlet 객체는 몇개 생성? 1개 
   init() 몇번 실행? 1번 
   service() 몇번 실행? 10번 
   destroy() 몇번 실행? 서비스 종료( was 중지) 직전 1번 실행 

 - ServletConfig 
    개별 서블릿의 설정 정보를 저장하는 객체 
    서블릿 당 하나 생성 
    Web Container(Servlet Container) 에 의해 init 호출시점에 ServletConfig 객체가 주입된다 
    초기 파라미터 ( init-param ) , ServletContext 객체 주소값 등이 ServletConfig에 저장되어 전달된다 
    ex) 사원(서블릿) 당 사원증(ServletConfig) 
    
  - ServletContext
    웹어플리케이션 내의 모든 서블릿과 jsp가 공유하는 자원 ( 필요시 정보를 set/get 할 수 있다 ) 
    웹어플리케이션 당 하나 생성   
    웹어플리케이션 시작 시점에 생성되고 종료 직전에 소멸된다 
    ex) 회사(web application) 사내 인트라넷(ServletContext)  
 









 





				  



































